import sys
import os
import time
import socket
import random
RED = '\033[31m'
GREEN = '\033[32m'
BLUE = '\033[34m'

#Code Time
from datetime import datetime
now = datetime.now()
hour = now.hour
minute = now.minute
day = now.day
month = now.month
year = now.year

##############
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
bytes = random._urandom(1490)
#############

os.system("clear")
os.system("figlet  JsHack En YT")

print (BLUE+""" 
Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´ Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´`
Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â¶Â¶Â¶Â¶Â¶Â¶Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´
Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â¶Â¶Â¶Â¶Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â¶Â¶Â¶Â¶Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´
Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â¶Â¶Â¶Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â¶Â¶Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´
Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â¶Â¶Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â¶Â¶Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´
Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â¶Â¶Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´`Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â¶Â¶Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´`
Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â¶Â¶Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â¶Â¶Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´
Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â¶Â¶Â´Â¶Â¶Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â¶Â¶Â´Â¶Â¶Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´
Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â¶Â¶Â´Â¶Â¶Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â¶Â¶Â´Â´Â¶Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´
Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â¶Â¶Â´Â¶Â¶Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â¶Â¶Â´Â´Â¶Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´
Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â¶Â¶Â´Â´Â¶Â¶Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â¶Â¶Â´Â¶Â¶Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´
Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â¶Â¶Â´Â´Â¶Â¶Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â¶Â¶Â´Â´Â¶Â¶Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´
Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â¶Â¶Â´Â¶Â¶Â´Â´Â´Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â´Â´Â´Â´Â´Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â´Â´Â´Â¶Â¶Â´Â¶Â¶Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´
Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â¶Â¶Â¶Â¶Â´Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â´Â´Â´Â´Â´Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â´Â¶Â¶Â¶Â¶Â¶Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´
Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â¶Â¶Â¶Â´Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â´Â´Â´Â´Â´Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â´Â¶Â¶Â¶Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´
Â´Â´Â´Â´Â¶Â¶Â¶Â´Â´Â´Â´Â´Â´Â´Â¶Â¶Â´Â´Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â´Â´Â´Â´Â´Â´Â´Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â´Â´Â¶Â¶Â´Â´Â´Â´Â´Â´Â¶Â¶Â¶Â¶Â´Â´Â´
Â´Â´Â´Â¶Â¶Â¶Â¶Â¶Â´Â´Â´Â´Â´Â¶Â¶Â´Â´Â´Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â´Â´Â´Â¶Â¶Â¶Â´Â´Â´Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â´Â´Â´Â¶Â¶Â´Â´Â´Â´Â´Â¶Â¶Â¶Â¶Â¶Â¶Â´Â´
Â´Â´Â¶Â¶Â´Â´Â´Â¶Â¶Â´Â´Â´Â´Â¶Â¶Â´Â´Â´Â´Â´Â¶Â¶Â¶Â´Â´Â´Â´Â¶Â¶Â¶Â¶Â¶Â´Â´Â´Â´Â¶Â¶Â¶Â´Â´Â´Â´Â´Â¶Â¶Â´Â´Â´Â´Â¶Â¶Â´Â´Â´Â¶Â¶Â´Â´
Â´Â¶Â¶Â¶Â´Â´Â´Â´Â¶Â¶Â¶Â¶Â´Â´Â¶Â¶Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â¶Â¶Â´Â´Â¶Â¶Â¶Â¶Â´Â´Â´Â´Â¶Â¶Â¶Â´
Â¶Â¶Â´Â´Â´Â´Â´Â´Â´Â´Â´Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â´Â´Â´Â´Â´Â´Â´Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â´Â´Â´Â´Â´Â´Â´Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â´Â´Â´Â´Â´Â´Â´Â´Â¶Â¶
Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â´Â´Â´Â´Â´Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â´Â´Â´Â´Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â´Â´Â´Â´Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â´Â´Â´Â´Â´Â´Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶
Â´Â´Â¶Â¶Â¶Â¶Â´Â¶Â¶Â¶Â¶Â¶Â´Â´Â´Â´Â´Â´Â¶Â¶Â¶Â¶Â¶Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â¶Â¶Â¶Â´Â¶Â¶Â´Â´Â´Â´Â´Â¶Â¶Â¶Â¶Â¶Â¶Â´Â¶Â¶Â¶Â´
Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â¶Â¶Â¶Â¶Â¶Â¶Â´Â´Â¶Â¶Â¶Â´Â´Â¶Â¶Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â¶Â¶Â´Â´Â¶Â¶Â¶Â´Â´Â¶Â¶Â¶Â¶Â¶Â¶Â´Â´Â´Â´Â´Â´Â´Â´
Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â¶Â¶Â¶Â¶Â¶Â¶Â´Â¶Â¶Â´Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â´Â¶Â¶Â´Â¶Â¶Â¶Â¶Â¶Â¶Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´
Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â¶Â¶Â´Â¶Â¶Â´Â¶Â´Â¶Â´Â¶Â´Â¶Â´Â¶Â´Â¶Â´Â¶Â´Â¶Â´Â¶Â¶Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´
Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â¶Â¶Â¶Â¶Â´Â´Â¶Â´Â¶Â´Â¶Â´Â¶Â´Â¶Â´Â¶Â´Â¶Â´Â¶Â´Â´Â´Â¶Â¶Â¶Â¶Â¶Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´
Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â¶Â¶Â¶Â¶Â¶Â´Â¶Â¶Â´Â´Â´Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â´Â´Â´Â¶Â¶Â´Â¶Â¶Â¶Â¶Â¶Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´
Â´Â´Â´Â´Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â´Â´Â´Â´Â´Â¶Â¶Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â¶Â¶Â´Â´Â´Â´Â´Â´Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â´Â´Â´Â´
Â´Â´Â´Â¶Â¶Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â¶Â¶Â´Â´Â´
Â´Â´Â´Â´Â¶Â¶Â¶Â´Â´Â´Â´Â´Â¶Â¶Â¶Â¶Â¶Â´Â´Â´Â´Â´Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â´Â´Â´Â´Â´Â¶Â¶Â¶Â¶Â¶Â´Â´Â´Â´Â´Â¶Â¶Â¶Â´Â´Â´Â´
Â´Â´Â´Â´Â´Â´Â¶Â¶Â´Â´Â´Â¶Â¶Â¶Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â¶Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â¶Â¶Â¶Â´Â´Â´Â¶Â¶Â´Â´Â´Â´Â´Â´
Â´Â´Â´Â´Â´Â´Â¶Â¶Â´Â´Â¶Â¶Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â¶Â¶Â´Â´Â¶Â¶Â´Â´Â´Â´Â´Â´
Â´Â´Â´Â´Â´Â´Â´Â¶Â¶Â¶Â¶Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â´Â¶Â¶Â¶Â¶Â´Â´Â´Â´Â´Â´Â´""")

print (RED+"Autor: JsHack")
print (RED+"You Tube : https://m.youtube.com/channel/UC-Kz94tNfH4ued-Ux1p9VWg")
print (RED+"github   : https://github.com/jsh4ck")


print (BLUE+"[1]: Herramientas DDoS")
print (BLUE+"[2]: Herramienta De Fuerza Bruta")
print (BLUE+"[3]: Herramientas Phising")
print (BLUE+"[4]: Herramientas Vulnerabilidades")
print (BLUE+"[5]: Herramientas InformaciÃ³n")
print (BLUE+"[6]: Herramientas Explotacion")
opcion=input("\nElije una opcion: ")
if opcion=="1":
  os.system ("clear")
  print (RED+"""
  


  

 .########..########...#######...######.
 .##.....##.##.....##.##.....##.##....##
 .##.....##.##.....##.##.....##.##......
 .##.....##.##.....##.##.....##..######.
 .##.....##.##.....##.##.....##.......##
 .##.....##.##.....##.##.....##.##....##
 .########..########...#######...######.
""")
  
print (BLUE+"""
 [1]: Xerxes Es Una Herramienta De DDoS Muy Potente Es Muy Recomendada Sirve Demasiado No Sera Suficiente Para Tumbar Una Pagina Pero Puedes Desde Otro Telefono Usar La Misma Herramienta



$ git clone https://github.com/ngrock90/xerxes

$ cd Xerxes

$ chmod +x *

$ ./xerxes www.fakesite.com 80



 
 
 
 [2]: DDoSJs, Esta Es Mi Herramienta, No Es Tan Buena Pero Esta Funcional, Te La Recomiendo Si No Buscas Causar Mucho DaÃ±o Y Solo Una Advertencia



$ git clone https://github.com/jsh4ck/AtaqueDDoS

$ cd AtaqueDDoS

$ python ddosjs.py

Ejemplo:

IP: 92.827.748.83

Port: 80






[3]: Hammer Es Una Herramienta DDoS No Muy Potente Pero Funciona, Juntas Las Herramientas Son Potentes. 



$ git clone https://github.com/rk1342k/Hammer

$ cd Hammer 

$ python hammer.py -s [direcciÃ³n ip] -t 135

ejemplo:

$ python hammer.py -s 123.45.67.89 -t 135""")
if opcion=="2":
  os.system ("clear")
  print (RED+"""
  
  
     dMMMMMP     dMMMMb 
    dMP         dMP"dMP 
   dMMMP       dMMMMK"  
  dMP         dMP.aMF   
 dMP         dMMMMP"    
                        
     dMMMMb     dMMMMb    dMP dMP  dMMMMMMP     .aMMMb 
    dMP"dMP    dMP.dMP   dMP dMP     dMP       dMP"dMP 
   dMMMMK"    dMMMMK"   dMP dMP     dMP       dMMMMMP  
  dMP.aMF    dMP"AMF   dMP.aMP     dMP       dMP dMP   
 dMMMMP"    dMP dMP    VMMMP"     dMP       dMP dMP    """)
                                                       


print (BLUE+"""

 [1]: FireCrack: 
 
$ pkg install python2

$ git clone https://github.com/Ranginang67/Firecrack

$ ls

$ cd Firecrack

$ ls

$ pip2 install -r requirements.txt

$ pip2 install mechanize


ejecutamos la herramienta con
 
$ python2 firecrack.py

escribimos el comando help
y ya de ahÃ­ ponen el comando que quieran, en este caso el comando nÃºmero dos. ponen la ID de la persona a atacar

y luego ponen el nombre de su archivo de contraseÃ±as 




[2]: Cracker: Una Herramienta Muy Buena Ya Que Por Defecto Ya Te Da Unas ContraseÃ±as.

$ apt update && pkg upgrade -y

$ pkg install python python2 git figlet ruby -y;gem install lolcat;pip2 install mechanize -y

$ git cloneÂ https://github.com/FearFraiming/Cracker

$ cd Cracker;pip2 install -r requirements.txt

$ bash cracker.sh

Ponen El Id Del Usuario Y Ponen password.txt o ustedes pueden exportar un diccionario.


Hay Mas, Todos Tiene  La Misma Funcion, Asi Que Solo Puse Dos.""")
if opcion=="3":
  os.system ("clear")
  print (RED+"""
  
  
  
            ####       ####              ####                     
 #######  #  #       #  #    #######   #  #   #######   ####### 
 #     ## #  ####   #####    #     #  #####   #     ## ##     # 
 #  ##  # #     ##  #   #   #  #####  #   #   #  ##  # #  ##  # 
 #  ##  # #  ##  #  ##  #   ##    ##  ##  #   #  ##  # ##     # 
 #     ## #  ##  #  ##  ##  #####  #  ##  ##  #  ##  #  ##### # 
 #  ####  #  ##  #  #    #  #     ##  #    #  #  ##  #  #    ## 
 ####     ########  ######  #######   ######  ########  ######  """)

 
  
  print (BLUE+"""
 [1] SocialSploit:
  Una Herramienta Mediamente Completa, Que Tiene Las Principales Redes Y Importantes Redes Sociales, Con Un Poco De Ingeniaria Social Junto Con Esta Herramienta Son Una Bomba.
  
  
$ pkg update

$ pkg upgrade

$ pkg install -y git

$ git clone https://github.com/Cesar-Hack-Gray/SocialSploit

$ ls

$ cd SocialSploit

$ ls

$ bash install.sh

$ ./Sploit
  
  
  
  
  
  
  [2]: zphisher, es una herramienta muy completa y una de las mejores, te la recomiendo.

pkg install -y git

git clone https://github.com/htr-tech/zphisher

ls
cd zphisher

bash zphisher.sh

Escojes Una Opcion.





  [3]: SocialFish: Una Herramienta Muy Buena ðŸ¤¡

$ apt update

$ apt upgrade

$ apt install git

$ apt install python2


$ git clone https://github.com/xHak9x/SocialPhish.git


$ cd SocialFish

$ chmod +x socialphish.sh

$ ./socialphish.sh


  
  
  
  
  [4]: FotoSploit Con Esta Herramienta Puedes Agregar Imagen A Tu Link De Phising Asi Que Es Mas Creible.
 

$ pkg update && pkg upgrade -y

$ pkg install -yÂ php

$ pkg install -yÂ python2

$ pkg install -y git

$ git clone https://github.com/Cesar-Hack-Gray/FotoSploit

$ cd FotoSploitÂ 

$ ls




[5]: ShellPhish Otra Herramienta Muy Completa Y Recomendada ðŸ’£.

Obligatorio Ngrok)

Comandos:

pkg upgrade

 pkg install git


Repositorio ðŸ”§

git clone https://github.com/thelinuxchoice/shellphish

Ejecutamos:ðŸ”§

cd shellphish

chmod +x shellphish.sh

./shellphish.sh

pkg install php

 pkg install curl


pkg install ssh

pkg install SSH

 pkg install openssh

 ./shellphish

bash shellphish.sh




Hay Muchas Mas Herramientas Pero Considero Que Estas Son Las Mejores...""")
if opcion=="4":
  os.system ("clear")
  print (RED+"""
  



 .##.....##.##.....##.##.......##....##.########.########.....###....########..####.##.......####.########.....###....########.
 .##.....##.##.....##.##.......###...##.##.......##.....##...##.##...##.....##..##..##........##..##.....##...##.##...##.....##
 .##.....##.##.....##.##.......####..##.##.......##.....##..##...##..##.....##..##..##........##..##.....##..##...##..##.....##
 .##.....##.##.....##.##.......##.##.##.######...########..##.....##.########...##..##........##..##.....##.##.....##.##.....##
 ..##...##..##.....##.##.......##..####.##.......##...##...#########.##.....##..##..##........##..##.....##.#########.##.....##
 ...##.##...##.....##.##.......##...###.##.......##....##..##.....##.##.....##..##..##........##..##.....##.##.....##.##.....##
 ....###.....#######..########.##....##.########.##.....##.##.....##.########..####.########.####.########..##.....##.########.""")
 
print (RED+"""
 [1] Breacher 
 
 Un script para encontrar pÃ¡ginas de inicio de sesiÃ³n de administrador y vulnerabilidades EAR.


â€¢ Multihilos bajo demanda
â€¢ Gran lista de rutas (482 rutas)
â€¢ Admite extensiones php, asp y html
â€¢ Comprueba posibles vulnerabilidades EAR
â€¢ Verificaciones para robots.txt
â€¢ Soporte para parches personalizados

INSTALACIÃ“N:

$ apt update && apt upgrade
$ apt install git -y
$ apt install python2 -y
$ apt install python -y
$ git clone https://github.com/s0md3v/Breacher.git
$ cd Breacher


$ python2 breacher.py

Uso:

â€¢ Verifique todas las rutas con extensiÃ³n php: python breacher -u example.com - tipo php
â€¢ Verifique todas las rutas con extensiÃ³n php con hilos: python breacher -u example.com - tipo php - rÃ¡pido
â€¢ Verifique todas las rutas sin hilos: python breacher -u example.com
â€¢ Agregar una ruta personalizada.

Por ejemplo, si desea que todas las rutas comiencen con /data (example.com/data / ...) puede hacer esto: python breacher -u example.com --path /data

Nota: Cuando especifica una extensiÃ³n usando la opciÃ³n --type, Breacher incluye rutas de esa extensiÃ³n, asÃ­ como rutas sin extensiones como /admin/login





[2]: GoldenEye

GoldenEye es una aplicaciÃ³n de Python para FINES DE PRUEBA DE SEGURIDAD SOLAMENTE! GoldenEye es una herramienta de prueba HTTP DoS. Vector de ataque explotado: HTTP Keep Alive + NoCache

INSTALACIÃ“N:

$ apt update && apt upgrade
$ apt install git -y
$ apt install python2 -y
$ git clone https://github.com/jseidl/GoldenEye

USO:

$ cd GoldenEye
$ chmod +x *
$ python2 goldeneye.py [url]

OPCIONES:

 -u, --useragents Archivo con agentes de usuario para usar (predeterminado: generado aleatoriamente)
-w, --workers NÃºmero de trabajadores concurrentes (predeterminado: 50)
-s, --sockets NÃºmero de sockets concurrentes (predeterminado: 30)
-m, --method MÃ©todo HTTP para usar 'get' o 'post' o 'random' (valor predeterminado: get)
-d, --debug Habilitar modo de depuraciÃ³n [salida mÃ¡s detallada] (predeterminado: Falso)
-n, --nosslcheck No verificar el certificado SSL (predeterminado: True)
-h, --help Muestra esta ayuda





[3]: Hunner Framework

Este marco estÃ¡ diseÃ±ado para realizar pruebas de penetraciÃ³n.

FUNCIONES:

-Analizar vulnerabilidad sql
-Analizar vulnerabilidad xss
-DDos sitios
-Fuerza bruta ftp
-Fuerza bruta SSh
-Cuentas de correo electrÃ³nico de fuerza bruta

INSTALACIÃ“N:

$ apt update && apt upgrade
$ apt install git -y
$ apt install python -y
$ git clone https://github.com/b3-v3r/Hunner
$ cd Hunner
$ chmod 777 hunner.py

MÃ‰TODO DE USO:

$ python hunner.py





[4]: ClickJacking

Un script de Python diseÃ±ado para verificar si el sitio web es vulnerable al clickjacking y crea un poc.

INSTALACIÃ“N:

$ apt update && apt upgrade
$ apt install git -y
$ apt install python2 -y
$ apt install python -y
$ git clone https://github.com/D4Vinci/Clickjacking-Tester.git
$ cd Clickjacking-Tester
$ chmod +x *

MÃ‰TODO DE USO:

Cree un archivo ejem:"sites.txt" aquÃ­ pegue los sitios web de las vÃ­ctimas.

python clickjacking_tester.py sites.txt



 
[4]: Optiva Framework

Puede usar este marco en su sitio web para verificar la seguridad de su sitio web al encontrar la vulnerabilidad en su sitio web o puede usar esta herramienta para obtener la inyecciÃ³n SQL de bÃºsqueda del panel de administraciÃ³n por parte de dork, asÃ­ como recopilar informaciÃ³n y cifrar Hash.

CARACTERISTICAS:

1. MÃ³dulos de informaciÃ³n:
â€¢ Port Scanner
â€¢ BÃºsqueda de Whois
â€¢ BÃºsqueda inversa de dominio IP
â€¢ BÃºsqueda de dominio de encabezado HTTP
â€¢ Iplocator recupera informaciÃ³n de geolocalizaciÃ³n IP
2. MÃ³dulos hash:
â€¢ Texto de codificaciÃ³n Md5
â€¢ Texto de codificaciÃ³n Sha1
â€¢ SHA256 Codificar texto
â€¢ SHA384 Codificar texto
â€¢ SHA512 Codificar texto
3. MÃ³dulos de escÃ¡ner:
â€¢ Scripting de sitios cruzados (XSS) â€¢ EscÃ¡ner de inyecciÃ³n SQL (SQL)
â€¢ Vuln de inyecciÃ³n SQL de Dork Search
â€¢ EscÃ¡ner de ejecuciÃ³n remota de cÃ³digo (RCE)
â€¢ Buscador del escÃ¡ner del panel de administraciÃ³n del sitio web

INSTALACIÃ“N:

$ apt update && apt upgrade
$ apt install git -y
$ apt install python2 -y
$ git clone https://github.com/joker25000/Optiva-Framework
$ cd Optiva-Framework
$ chmod +x *
$ bash installer.sh selecciona la opciÃ³n 3.

MÃ‰TODO DE USO:

$ python2 optiva.py





[5]: Striker

Striker es un escÃ¡ner de informaciÃ³n y vulnerabilidad ofensivo.

CARACTERISTICAS:

Solo proporcione un nombre de dominio a Striker y automÃ¡ticamente harÃ¡ lo siguiente:
â€¢ Verificar y omitir Cloudflare
â€¢ Recuperar servidor y alimentado por encabezados
â€¢ Huella digital del sistema operativo del servidor web
â€¢ Detectar CMS (se admiten mÃ¡s de 197 CMS)
â€¢ Inicie WPScan si el objetivo estÃ¡ usando Wordpress
â€¢ Recuperar robots.txt
â€¢ BÃºsqueda de Whois
â€¢ Compruebe si el objetivo es un honeypot
â€¢ Escaneo de puertos con captura de pancartas
â€¢ Vuelca todo tipo de registros DNS â€¢ Genere un mapa para visualizar la superficie de ataque.
â€¢ Recopilar correos electrÃ³nicos relacionados con el objetivo
â€¢ Encuentra sitios web alojados en el mismo servidor web
â€¢ Encuentra hosts usando google
â€¢ Rastrear el sitio web en busca de URL que tengan parÃ¡metros
â€¢ Escaneo SQLi usando la implementaciÃ³n en lÃ­nea de SQLMap (toma <3 min.)
â€¢ Escaneo XSS bÃ¡sico

INSTALACIÃ“N:

$ apt update && apt upgrade
$ apt install git -y
$ apt install python2 -y
$ git clone https://github.com/s0md3v/Striker
$ cd Striker
$ pip2 install -r requirements.txt

MÃ‰TODO DE USO:

$ python2 striker.py





[6]: SQLMAP


sqlmap es una herramienta de prueba de penetraciÃ³n de cÃ³digo abierto que automatiza el proceso de detecciÃ³n y explotaciÃ³n de fallas de inyecciÃ³n SQL y toma de control de los servidores de bases de datos. Viene con un potente motor de detecciÃ³n, muchas funciones de nicho para el Ãºltimo probador de penetraciÃ³n y una amplia gama de interruptores que duran desde la toma de huellas digitales de la base de datos, la obtenciÃ³n de datos desde la base de datos, hasta el acceso al sistema de archivos subyacente y la ejecuciÃ³n de comandos en el sistema operativo a travÃ©s de out- conexiones fuera de banda.

INSTALACIÃ“N:

$ apt update && apt upgrade
$ apt install git -y
$ apt install python2 -y
$ git clone https://github.com/sqlmapproject/sqlmap

MÃ‰TODO DE USO:

$ cd sqlmap
$ chmod +x *

â€¢ Para obtener una lista de opciones bÃ¡sicas y conmutadores, use: python2 sqlmap.py -h

â€¢ Para obtener una lista de todas las opciones y conmutadores, use: python2 sqlmap.py -hh""")


print(RED+"Para Mi Son Las Mejores")

if opcion=="5":
  os.system ("clear")
  print (RED+"""
  
   .####.##....     ##.######      #########
 ..##   ..###...##.  ##.....    ##.....##
 ..##..   ####..##  .##......  .##.....##
 ..##.   .##.##.##.  ######..  .##.....##
 ..##.   .##..####.  ##.....  ..##.....##
 ..##.   .##...###.  ##....  ...##.....##
 .####   .##....##.  ##.... ....#########""")

print (BLUE+"""
 
 [1]: A2SV

A2SV significa Vulnerabilidad de escaneo automÃ¡tico a SSL. A2SV realiza un anÃ¡lisis de vulnerabilidades para la inyecciÃ³n CCS, Heartbleed, Logjam, Freak Attack, Anonymous Cipher, SSL v3 POODLE, SSL v2 Drown y Crime (SPDY).

INSTALACIÃ“N:

$ pkg install git -y
$ git clone https://github.com/hahwul/a2sv.git
$ cd a2sv
$ pkg install python -y
$ pip install argparse
$ pip install netaddr
$ apt-get install openssl-tool

â€¢ Correr A2SV

$ python a2sv.py -h

MÃ‰TODO DE USO:

a2sv [-h] [-t TARGET] [-tf TARGETFILE] [-p PORT] [-m MODULE] [-d DISPLAY] [-u] [-v]

ESCANEAR SSL:

$ python a2sv.py -t 127.0.0.1
$ python a2sv.py -t 127.0.0.1 -m heartbleed
$ python a2sv.py -t 127.0.0.1 -d n
$ python a2sv.py -t 127.0.0.1 -p 8111
$ python a2sv.py -tf target_list.txt""")



print (RED+"""


[2]: AndroBugs 


AndroBugs Framework es un sistema de anÃ¡lisis de vulnerabilidad de Android que ayuda a los desarrolladores o hackers a encontrar posibles vulnerabilidades de seguridad en las aplicaciones de Android. Sin una interfaz GUI esplÃ©ndida, pero la mÃ¡s eficiente (menos de 2 minutos por escaneo en promedio) y mÃ¡s precisa.

INSTALACIÃ“N:

$ apt update
$ apt upgrade
$ apt install git -y
$ apt install python2 -y
$ git clone https://github.com/AndroBugs/AndroBugs_Framework.git
$ cd AndroBugs_Framework
$ chmod +x *

METODO DE USO:

Nos dirigimos a la carpeta donde esta nuestra app:
EJEMPLO:

cd /sdcard/Download

ls

Buscamos el nombre de nuestra app y la movemos:

mv app.apk /$HOME/AndroBugs_Framework

Entramos a la carpeta AndroBugs:

cd

cd AndroBugs_Framework

ls

Ahora ejecuta este comando:

python2 androbugs.py -f app.apk -o result.txt

[*] app.apk es el nombre del apk, result.txt almacenarÃ¡ toda la informaciÃ³n. Esto mostrarÃ¡ todos los errores y vulnerabilidades de su aplicaciÃ³n.""")



print (BLUE+"""

[3]: AngryFuzzer


AngryFuzz3r es una colecciÃ³n de herramientas para pentesting para recopilar informaciÃ³n y descubrir vulnerabilidades de los objetivos basadas en Fuzzedb.


CARACTERISTICAS:

 â€¢ URL de fuzz establecida desde un archivo de entrada
 â€¢ BÃºsqueda de ruta relativa concurrente
 â€¢ NÃºmero configurable de trabajadores difusos
 â€¢ Fuzz CMS ==> Wordpress, Durpal, Joomla
 â€¢ Generar informes de las rutas vÃ¡lidas.

INSTALACIÃ“N:

$ apt update && apt upgrade
$ apt install git -y
$ apt install python -y
$ git clone https://github.com/ihebski/angryFuzzer.git
$ cd angryFuzzer
$ pip install -r requirements.txt
$ pip install requests
$ chmod +x *
$ python angryFuzzer.py

MÃ‰TODO DE USO:

$ python angryFuzzer.py -h
uso: angryFuzzer.py [opciones]

opciones:
 -h, - Muestra mensaje de ayuda.

-q, - Modo silencioso silencioso, solo informa.

-u URL, --url = URL URL del destino.

-c CMS, --cms = CMS scan CMS ==> wp, dp

 -w WORDLIST, --wordlist = WORDLIST Lista de palabras personalizada

Ejemplos:

â€¢ Fuzzing una url con diccionario predeterminado:
$ python angryFuzzer.py -u http://127.0.0.1

â€¢ CMS difuso (wp: Â¡en este ejemplo!):
python angryFuzzer.py -u http://127.0.0.1 --cms wp

â€¢ Difuminar una lista de palabras personalizada:
python angryFuzzer.py -u http://127.0.0.1 -w fuzzdb / discovery / predictable-filepaths / php / PHP.txt""")


print (RED+"""


[4]: Crips IP 


Crips IP Tools: esta herramienta es una colecciÃ³n de herramientas IP en lÃ­nea que se pueden utilizar para obtener rÃ¡pidamente informaciÃ³n sobre direcciones IP, pÃ¡ginas web y registros DNS.

MenÃº:

-BÃºsqueda Whois
-Traceroute
-BÃºsqueda DNS
-BÃºsqueda DNS inversa
-BÃºsqueda GeoIP
-Escaneo de puertos
-BÃºsqueda IP inversa

InstalaciÃ³n:

$ apt update && apt upgrade
$ apt install git -y
$ apt install python2 -y
$ apt install python -y
$ git clone https://github.com/Manisso/Crips
$ cd Crips
$ chmod +x *
$ ./install.sh

Uso:

$ python2 crips.py

Ahora seleccione su opciÃ³n.""")



print (BLUE+"""

[5]: PureBlood


Un marco de prueba de penetraciÃ³n creado para Hackers / Pentester / Bug HunterWeb Pentest

RecopilaciÃ³n de informaciÃ³n:

-Banner Grab Quien es
-Traceroute Registro DNS
-BÃºsqueda inversa de DNS
-BÃºsqueda de transferencia de zona -Escaneo de puertos
-Escaneo del panel de administraciÃ³n
-Escaneo de subdominio CMS Identify
-BÃºsqueda inversa de IP
-BÃºsqueda de subred
-Extraer enlaces de pÃ¡gina Fuzz de directorio
-File Fuzz Shodan Search
-Shodan Host Lookup
-Ataque a la aplicaciÃ³n web:Wordpress InyecciÃ³n automÃ¡tica de SQL

*Generador: Desfigurar pÃ¡gina

*Generador de contraseÃ±as Text To Hash

InstalaciÃ³n:

$ apt update && apt upgrade
$ apt install git -y
$ apt install python -y
$ git clone https://github.com/cr4shcod3/pureblood
$ cd pureblood
$ chmod +x *
$ pip install -r requirements.txt

Uso :

$ python2 pureblood.py

Ahora seleccione su opciÃ³n.""")



print (RED+"""

[6] RED HAWK


Herramienta todo en uno para recopilaciÃ³n de informaciÃ³n y escaneo de vulnerabilidades.

SCANNER:

â€¢ Escaneo bÃ¡sico
- TÃ­tulo del sitio NUEVO
- DirecciÃ³n IP
- DetecciÃ³n del servidor web MEJORADO
- DetecciÃ³n CMS
- DetecciÃ³n de Cloudflare
- EscÃ¡ner robots.txt
â€¢ BÃºsqueda Whois MEJORADA
â€¢ BÃºsqueda de geo-IP
â€¢ Agarrar pancartas MEJORADO
â€¢ BÃºsqueda de DNS
â€¢ Calculadora de subred
â€¢ Escaneo de puertos Nmap
â€¢ Sub-Domain Scanner MEJORADO - Subdominio - DirecciÃ³n IP
â€¢ BÃºsqueda inversa de IP y detecciÃ³n de CMS MEJORADO
- Nombre de host
- DirecciÃ³n IP
- CMS
â€¢ EscÃ¡ner SQLi basado en errores
â€¢ Bloggers Ver NUEVO
- CÃ³digo de respuesta HTTP
- TÃ­tulo del sitio
- Ranking de Alexa
- Autoridad de dominio
- Autoridad de la pÃ¡gina
- Extractor de enlaces sociales
- Link Grabber
â€¢ WordPress Scan NUEVO
- Archivos sensibles arrastrÃ¡ndose
- DetecciÃ³n de versiÃ³n
- VersiÃ³n Vulnerability Scanner
â€¢ Crawler
â€¢ BÃºsqueda de MX NUEVO
â€¢ Escanear para todo: el escÃ¡ner Old Lame

INSTALACIÃ“N:

$ apt update && apt upgrade
$ apt install git -y
$ apt install php -y
$ git clone https://github.com/Tuhinshubhra/RED_HAWK

MÃ‰TODO DE USO:

$ cd RED_HAWK
$ chmod +x *
$ php rhawk.php

â€¢ Use el comando "help" para ver la lista de comandos o escriba el nombre de dominio que desea escanear (sin Http: // O Https: //) """)



print (BLUE+"""

[7]: InfoGA


Infoga es una herramienta que recopila informaciÃ³n de cuentas de correo electrÃ³nico (ip, nombre de host, paÃ­s, ...) de diferentes fuentes pÃºblicas (motores de bÃºsqueda, servidores de clave pgp y shodan) y comprueba si los correos electrÃ³nicos se filtraron utilizando la API de correos electrÃ³nicos pirateados.
Es una herramienta realmente simple, pero muy efectiva para las primeras etapas de una prueba de penetraciÃ³n o simplemente para conocer la visibilidad de su empresa en Internet.

InstalaciÃ³n:

$ apt update && apt upgrade
$ apt install git -y
$ apt install python -y
$ git clone https://github.com/m4ll0k/Infoga.git infoga
$ cd infoga
$ python setup.py install
$ python infoga.py


Uso:

$ python infoga.py

Ahora muestra todas las opciones para usar esta herramienta:

$ python infoga.py -t gmail.com -s all

Ahora ha comenzado a recopilar informaciÃ³n de correos electrÃ³nicos y correos electrÃ³nicos [nombre de host, ciudad, organizaciÃ³n, puertos de longitud y latitud ...] """)
if opcion=="6":
  os.system ("clear")
  print (RED+"""
â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–“â–“â–“â–“â–“â–“â–“â–“â–’â–‘â–‘â–‘â–‘â–‘â–’â–’â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–“â–ˆâ–ˆâ–ˆâ–ˆâ–ˆ
â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–“â–“â–“â–“â–“â–“â–“â–“â–’â–‘â–‘â–‘â–‘â–‘â–’â–’â–’â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–“â–ˆâ–ˆâ–ˆâ–ˆ
â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–“â–“â–“â–“â–“â–“â–“â–“â–’â–‘â–‘â–‘â–‘â–‘â–‘â–’â–’â–’â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–“â–ˆâ–ˆâ–ˆ
â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–“â–“â–“â–“â–“â–“â–“â–“â–’â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–’â–’â–’â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–ˆâ–ˆâ–ˆ
â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–“â–“â–“â–“â–“â–“â–“â–“â–’â–‘â–‘â–’â–“â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–ˆâ–ˆâ–ˆ
â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–“â–“â–“â–“â–“â–“â–“â–“â–’â–‘â–“â–ˆâ–ˆâ–ˆâ–ˆâ–‘â–‘â–‘â–‘â–‘â–’â–“â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–ˆâ–ˆâ–ˆ
â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–“â–’â–“â–“â–“â–“â–“â–’â–‘â–’â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–“â–‘â–‘â–‘â–‘â–“â–ˆâ–ˆâ–“â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–’â–ˆâ–ˆâ–ˆ
â–ˆâ–ˆâ–ˆâ–ˆâ–“â–’â–“â–’â–’â–’â–‘â–‘â–’â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–‘â–‘â–‘â–‘â–’â–ˆâ–ˆâ–ˆâ–ˆâ–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–ˆâ–ˆâ–ˆ
â–ˆâ–ˆâ–ˆâ–“â–’â–’â–’â–‘â–‘â–’â–“â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–’â–‘â–‘â–‘â–‘â–“â–ˆâ–ˆâ–ˆâ–ˆâ–’â–‘â–‘â–‘â–‘â–‘â–‘â–’â–ˆâ–ˆâ–ˆ
â–ˆâ–ˆâ–“â–’â–’â–‘â–‘â–’â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–“â–‘â–‘â–‘â–‘â–‘â–“â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–‘â–‘â–‘â–‘â–‘â–‘â–‘â–ˆâ–ˆâ–ˆ
â–ˆâ–ˆâ–“â–’â–‘â–‘â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–“â–‘â–‘â–‘â–‘â–‘â–‘â–’â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–“â–‘â–‘â–‘â–‘â–‘â–‘â–ˆâ–ˆâ–ˆ
â–ˆâ–ˆâ–“â–’â–‘â–’â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–“â–’â–’â–’â–‘â–‘â–‘â–‘â–‘â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–’â–‘â–‘â–‘â–‘â–‘â–“â–ˆâ–ˆ
â–ˆâ–ˆâ–“â–’â–‘â–‘â–’â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–“â–’â–’â–’â–’â–’â–‘â–‘â–‘â–‘â–‘â–“â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–“â–‘â–‘â–‘â–‘â–’â–ˆâ–ˆ
â–ˆâ–ˆâ–ˆâ–’â–‘â–‘â–‘â–‘â–’â–’â–’â–’â–’â–’â–’â–’â–’â–’â–’â–’â–‘â–‘â–‘â–‘â–‘â–‘â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–“â–‘â–‘â–‘â–“â–ˆâ–ˆ
â–ˆâ–ˆâ–ˆâ–“â–‘â–‘â–‘â–‘â–‘â–’â–’â–’â–“â–“â–’â–’â–’â–’â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–“â–‘â–‘â–‘â–ˆâ–ˆâ–ˆ
â–ˆâ–ˆâ–ˆâ–ˆâ–“â–’â–’â–’â–’â–“â–“â–“â–“â–“â–“â–’â–’â–“â–ˆâ–ˆâ–’â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–“â–ˆâ–ˆâ–ˆâ–“â–‘â–‘â–‘â–‘â–ˆâ–ˆâ–ˆ
â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–“â–“â–“â–“â–’â–’â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–“â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–ˆâ–ˆâ–ˆâ–ˆ
â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–“â–“â–“â–“â–’â–’â–‘â–“â–ˆâ–“â–“â–ˆâ–ˆâ–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–ˆâ–ˆâ–ˆâ–ˆâ–ˆ
â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–“â–“â–“â–“â–“â–’â–’â–’â–‘â–‘â–‘â–‘â–‘â–‘â–’â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ
â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–“â–“â–“â–“â–“â–“â–’â–’â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–’â–“â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ
â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–“â–“â–“â–“â–“â–’â–’â–’â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–“â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ
â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–“â–“â–“â–“â–’â–’â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–’â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–“â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ
â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–“â–“â–“â–’â–’â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–’â–‘â–‘â–‘â–‘â–‘â–‘â–“â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ
â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–“â–“â–’â–’â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–‘â–‘â–‘â–‘â–‘â–’â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ
â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–“â–“â–‘â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–‘â–‘â–‘â–‘â–’â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ
â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–“â–‘â–‘â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–‘â–‘â–‘â–‘â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ
â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–“â–‘â–“â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–’â–‘â–‘â–‘â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ
â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–“â–‘â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–“â–‘â–‘â–‘â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ
â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–“â–‘â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–‘â–‘â–‘â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ
â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–“â–’â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–‘â–‘â–‘â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ
â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–’â–’â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–’â–‘â–“â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ
â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–‘â–’â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–“â–‘â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ
â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–‘â–“â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–‘â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ
â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–‘â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–‘â–’â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ
â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–“â–‘â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–’â–‘â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ
â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–’â–‘â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–‘â–“â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ
â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–‘â–’â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–‘â–‘â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ
â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–‘â–’â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–“â–‘â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ
â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–‘â–“â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–‘â–’â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ
â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–‘â–“â–ˆâ–ˆâ–ˆâ–ˆâ–’â–‘â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ
â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–‘â–“â–ˆâ–ˆâ–ˆâ–“â–‘â–“â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ
â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–‘â–“â–“â–’â–‘â–“â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ
â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–’â–‘â–’â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ
â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ
â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ""")

print (BLUE+"""
[1]: CyberScan 

CyberScan es una herramienta de prueba de penetraciÃ³n de cÃ³digo abierto que puede analizar paquetes, decodificar, escanear puertos, hacer ping y geolocalizar una IP incluyendo (latitud, longitud, regiÃ³n, paÃ­s ...)

INSTALACIÃ“N:

$ apt update && apt upgrade
$ apt install git -y
$ apt install python2 -y
$ apt install python -y
$ git clone https://github.com/medbenali/CyberScan.git
$ cd CyberScan

MÃ‰TODO DE USO:

$ python2 CyberScan.py -v

Ayuda:

$ python2 CyberScan.py -h





[2]: D-TECT


D-TECT es una herramienta todo en uno para pruebas de penetraciÃ³n. Esto estÃ¡ especialmente programado para los probadores de penetraciÃ³n y los investigadores de seguridad para facilitar su trabajo, en lugar de lanzar diferentes herramientas para realizar diferentes tareas.
D-TECT proporciona mÃºltiples funciones y funciones de detecciÃ³n que recopilan informaciÃ³n del objetivo y encuentran diferentes defectos en ella.

CARACTERISTICAS:

â€¢ Escaneo de subdominios
â€¢ Escaneo de puertos
â€¢ Escaneo de Wordpress
â€¢ EnumeraciÃ³n de nombre de usuario de Wordpress
â€¢ Wordpress Backup Grabbing
â€¢ DetecciÃ³n de archivos sensibles
â€¢ Escaneo de secuencias de comandos en el mismo sitio
â€¢ DetecciÃ³n de jacking de clics
â€¢ Potente escaneo de vulnerabilidades XSS
â€¢ Escaneo de vulnerabilidades de inyecciÃ³n SQL
â€¢ Interfaz de usuario amigable

INSTALACIÃ“N:

$ apt update && apt upgrade
$ apt install git -y
$ apt install python2 -y
$ git clone https://github.com/shawarkhanethicalhacker/D-TECT-1.git
$ cd D-TECT-1
$ chmod +x *
$ pip2 install requests
$ python2 d-tect.py





[3]: Hakku


Hakku es un marco simple creado para herramientas de prueba de penetraciÃ³n. El marco Hakku ofrece una estructura simple, CLI bÃ¡sica y caracterÃ­sticas Ãºtiles para el desarrollo de herramientas de prueba de penetraciÃ³n.

INSTALACIÃ“N:

$ apt update && apt upgrade
$ apt install git -y
$ apt install python -y
$ git clone https://github.com/4shadoww/hakkuframework

MÃ‰TODO DE USO:

$ cd hakkuframework
$ chmod +x *
$ python hakku.py

â€¢ Para ver todos los mÃ³dulos, use este comando:

$ show modules

â€¢ Para mostrar todas las opciones de un mÃ³dulo en particular:

$ use module name
$ show options

MODÃšLOS(24):

â€¢ apache_users
â€¢ arp_dos
â€¢ arp_monitor
â€¢ arp_spoof
â€¢ bluetooth_pod
â€¢ cloudflare_resolver
â€¢ dhcp_dos
â€¢ dir_scanner
â€¢ dns_spoof
â€¢ email_bomber
â€¢ hostname_resolver
â€¢ mac_spoof
â€¢ mitm
â€¢ network_kill
â€¢ pma_scanner
â€¢ port_scanner
â€¢ proxy_scout
â€¢ whois
â€¢ web_killer
â€¢ web_scout
â€¢ wifi_jammer
â€¢ zip_cracker
â€¢ rar_cracker
â€¢ wordlist_gen





[4]: TheHarvester


theHarvester es una herramienta muy simple pero efectiva diseÃ±ada para usarse en las primeras etapas de una prueba de penetraciÃ³n.
Ãšselo para recopilar informaciÃ³n de cÃ³digo abierto y ayudar a determinar el panorama de amenazas externas de una empresa en Internet.
La herramienta recopila correos electrÃ³nicos, nombres, subdominios, direcciones IP y URL utilizando mÃºltiples fuentes de datos pÃºblicos.

INSTALACIÃ“N:

$ apt update && apt upgrade
$ apt install git -y
$ apt install python2 -y
$ apt install python -y
$ git clone https://github.com/laramies/theHarvester

MÃ‰TODO DE USO:

$ cd theHarvester
$ chmod +x *
$ python2 theHarvester.py
$ python2 theHarvester.py -d site.com -b google

DATOS PUBLICOS:

â€¢ www.baidu.com
â€¢ www.bing.com
â€¢ www.censys.io
â€¢ www.crt.sh
â€¢ www.cymon.io
â€¢ dnsdumpster.com
â€¢ www.dogpile.com
â€¢ www.duckduckgo.com
â€¢ www.google.com
â€¢ google-certificates
â€¢ www.hunter.io
â€¢ www.intelx.io
â€¢ www.linkedin.com
â€¢ www.netcraft.com
â€¢ www.securitytrails.com
â€¢ www.shodanhq.com
â€¢ www.threatcrowd.org
â€¢ trello
â€¢ twitter
â€¢ vhost(Bing virtual hosts search)
â€¢ virustotal.com
â€¢ yahoo





[5]: Zarp


Zarp es una herramienta de ataque de red centrada en la explotaciÃ³n de redes locales. Esto no incluye la explotaciÃ³n del sistema, sino mÃ¡s bien el abuso de protocolos de red y pilas para hacerse cargo, infiltrarse y eliminar. Las sesiones se pueden administrar para envenenar y oler rÃ¡pidamente varios sistemas a la vez, descargando informaciÃ³n confidencial automÃ¡ticamente o directamente al atacante. Se incluyen varios rastreadores para analizar automÃ¡ticamente los nombres de usuario y las contraseÃ±as de varios protocolos, asÃ­ como ver el trÃ¡fico HTTP y mÃ¡s. Se incluyen ataques DoS para eliminar varios sistemas y aplicaciones. Estas herramientas abren la posibilidad de escenarios de ataque muy complejos en redes en vivo de forma rÃ¡pida, limpia y silenciosa.

INSTALACIÃ“N:

$ apt update
$ apt upgrade
$ apt install git -y
$ apt install python2  -y
$ git clone https://github.com/hatRiot/zarp

MÃ‰TODO DE USO:

$ cd zarp
$ chmod +x *
$ python2 zarp.py

[!] Necesario root correr con proot o tsu.""")
